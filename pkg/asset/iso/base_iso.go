package iso

import (
	"fmt"
	"os"

	"github.com/danielerez/openshift-appliance/pkg/asset/config"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"

	"github.com/openshift/installer/pkg/asset"
)

// BaseIso generates the base ISO file for the image (RHCOS LiveCD)
type BaseISO struct {
	File *asset.File
}

var (
	baseIsoFilename = ""
)

var _ asset.WritableAsset = (*BaseISO)(nil)

// Name returns the human-friendly name of the asset.
func (i *BaseISO) Name() string {
	return "Base ISO (RHCOS)"
}

// Dependencies returns dependencies used by the asset.
func (i *BaseISO) Dependencies() []asset.Asset {
	return []asset.Asset{
		&config.ApplianceConfig{},
	}
}

// Generate the baseIso
func (i *BaseISO) Generate(dependencies asset.Parents) error {
	logrus.Info("Downloading CoreOS ISO...")

	configAsset := &config.ApplianceConfig{}
	dependencies.Get(configAsset)
	logrus.Debug("Release image: ", configAsset.Config.OcpReleaseImage)

	return nil
}

// Files returns the files generated by the asset.
func (i *BaseISO) Files() []*asset.File {
	if i.File != nil {
		return []*asset.File{i.File}
	}
	return []*asset.File{}
}

// Load returns the cached baseIso
func (i *BaseISO) Load(f asset.FileFetcher) (bool, error) {
	if baseIsoFilename == "" {
		return false, nil
	}

	baseIso, err := f.FetchByName(baseIsoFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, fmt.Sprintf("failed to load %s file", baseIsoFilename))
	}

	i.File = baseIso
	return true, nil
}
